/*
Project Structure :
rust-wasm-ui/
â”œâ”€â”€ Cargo.toml
â”œâ”€â”€ Trunk.toml            # Configuration for Trunk
â”œâ”€â”€ index.html            # Root HTML file served by Trunk
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ main.rs           # Entry point for Yew app
â”‚   â”œâ”€â”€ app.rs            # Main app logic (routes, layout)
â”‚   â”œâ”€â”€ api.rs            # API services (fetch logic)
|   â”œâ”€â”€ mod.rs           
â”‚   â”œâ”€â”€ components/       # Modular UI components
â”‚   â”‚   â”œâ”€â”€ employee_form.rs  # Used for the form to add or edit an employee.
â”‚   â”‚   â”œâ”€â”€ employee_list.rs  # Fetches and displays a list of employees.
â”‚   â”‚   â”œâ”€â”€ employee_card.rs  # reusable UI element to display each employee's details in the list card style
|   |   â”œâ”€â”€ mod.rs
â””â”€â”€ static/               # For static assets like CSS, images
    â””â”€â”€ styles.css 

If You are use trunk then follow 
To compile and run your Yew-based WebAssembly (WASM) app, you need to use `trunk`, which is the build tool for Yew projects that simplifies compiling your Rust code to WASM and serving it as a web application. Here's how you can compile and check the output:

### Prerequisites:
1. Install Rust: If you haven't installed Rust yet, install it from [rust-lang.org](https://www.rust-lang.org/learn/get-started).
2. Install WebAssembly target: Install the WebAssembly target for Rust:
-->   rustup target add wasm32-unknown-unknown

3. Install `trunk`: `trunk` is the build tool that handles building and bundling Yew projects:
-->   cargo install --locked trunk 
   installs the trunk tool, ensuring that the installation uses the versions of dependencies specified in Cargo.lock

4. Install `wasm-opt` (optional but recommended): `wasm-opt` optimizes the WASM output to make it smaller:
-->   cargo install wasm-opt

5. Create or Verify `index.html`:
   Ensure that your `index.html` is correctly linked to the WASM output (`main.js`), as mentioned earlier.

6. Compile with `trunk`:
   From the root of your project, run the following command to compile and build your WASM app:
-->   trunk build --release
      - This command compiles the Rust code to WASM and outputs the bundled files into the `dist/` directory.

7. Serve the Application:
   You can serve the application locally to view the output:
   trunk serve
   - This will start a development server, and you should see output like:
       Running `trunk serve`...
     ðŸš€  Server started at http://127.0.0.1:8080
      - Now, open your browser and navigate to `http://127.0.0.1:8080` to view your Yew app.

### Optional: Using `wasm-opt`
If you want to optimize your WASM file to reduce its size, you can use `wasm-opt`:
--> wasm-opt -Oz target/wasm32-unknown-unknown/release/your_project_name.wasm -o dist/your_project_name.wasm
This reduces the size of the WASM file, making it more efficient for web usage.

### Summary:
- Clean : `cargo clean` 
- Build: `cargo build --target wasm32-unknown-unknown`
- Compile and Serve: `trunk clean` `trunk build --release` and `trunk serve`
- Open the app: Visit `http://127.0.0.1:8080` in your browser.

Once this is set up, you should be able to check the output of your Yew app running as WebAssembly in the browser.
-----------------------------------------------------------
if not use trunk follow
#### Key Points:
1. Link to `styles.css`: The `<link rel="stylesheet" href="static/styles.css">` line will load your CSS file.
2. Link to the WebAssembly JavaScript: The `<script type="module">` block is where you import the JavaScript file generated by `wasm-bindgen` (e.g., `rest_employee_crud_frontend.js`).
3. Initialize the Yew App: The `init()` function is usually automatically generated in the `wasm-bindgen` build process. It initializes the WebAssembly app.

### Steps for Building Without `trunk`:
1. Build the Project: 
--> wasm-pack build --target web
OR
-->cargo build --target wasm32-unknown-unknown --release
   ```
2. Generate JavaScript with `wasm-bindgen`:
   You can use `wasm-bindgen` to generate the necessary JavaScript binding to your WebAssembly file:
--> wasm-bindgen target/wasm32-unknown-unknown/release/rest_employee_crud_frontend.wasm --out-dir pkg --target web
   - This generates both `rest_employee_crud_frontend.wasm` and `rest_employee_crud_frontend.js` in the `pkg/` directory.

3. Run the App:
   Now, you can host the `index.html` along with the `pkg` folder (which contains the WASM and JS files) using a static file server.

   You can use a tool like `http-server` to serve the files:
--> npx http-server   OR  python -m http.server
   This will start the server, and you can open your browser at `http://localhost:8080` to see the output.

---

### Summary:
- if you prefer not to use `trunk`, you can manually create the `index.html` file and handle the WebAssembly setup yourself using `wasm-bindgen` to generate the necessary JS and WASM files.
- `trunk` makes this process easier by automating the setup and bundling, but it's not mandatory if you want to handle things manually.

*/

mod components;
mod app;
pub mod api;

use crate::app::App;

fn main() {
    yew::Renderer::<App>::new().render();
}

/* Error 
error[E0432]: unresolved import `crate::app`
  --> src/main.rs:22:12
   |
22 | use crate::app::App;
   |            ^^^ could not find `app` in the crate root

*/   